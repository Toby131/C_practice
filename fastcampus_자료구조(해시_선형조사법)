//선형조사법구조체 정의
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h >
#include <time.h> //무작위 데이터를 삽입할거라 라이브러리 추가
#define TABLE_SIZE 10007 //소수로 설정
#define INPUT_SIZE 5000

typedef struct {
	int id;
	char name[20];
}Student;


//선형조사법 해시테이블의 초기화 및 반환함수
void init(Student **hashTable) {
	for (int i = 0; i < TABLE_SIZE; i++) {
		hashTable[i] = NULL; //각테이블 포인터 값 널값으로해서 초기화
	}
}


//해시테이블의 메모리 반환
void destructor(Student **hashTable) {
	for (int i = 0; i < TABLE_SIZE; i++) {
		if (hashTable[i] != NULL) { //특정학생이 해당 테이블에 존재한다면 반환
			free(hashTable[i]);
		}
	}
}

//선형조사법 데이터 탐색 함수
int findEmpty(Student **hashTable, int id) { //해시테이블 내 빈공간을 선형 탐색으로 찾음
	int i = id % TABLE_SIZE;
	while (1) {
		if (hashTable[i % TABLE_SIZE] == NULL) {
			return i % TABLE_SIZE;
		}
		i++;
	}
}

//특정 ID값에 매칭되는 데이터를 해시 테이블 내에서 찾기
int search(Student **hashTable, int id) {
	int i = id % TABLE_SIZE;
	while (1) {
		if (hashTable[i % TABLE_SIZE] == NULL) return -1;
		else if (hashTable[i % TABLE_SIZE]->id == id) return i;
		i++;
	}
}

//선형 조사법 데이터 삽입 및 추출 함수
void add(Student **hashTable, Student *input, int key) { //특정 키 인덱스에 데이터 삽입
	hashTable[key] = input;
}
Student *getValue(Student **hashTable, int key) { //해시 테이블에서 특정 키와 데이터 반환
	return hashTable[key];
}


//선형조사법 데이터 출력함수
void show(Student **hashTable){ //해시테이블에 존재하는 모든 데이터 출력
	for (int i = 0; i < TABLE_SIZE; i++) {
		if (hashTable[i] != NULL) { //해당버킷이 비어있지 않으면
			printf("키 : [%d] 이름 : [%s]\n", i, hashTable[i]->name); //데이터 출력
		}
	}
}


//선형조사법 해시 테이블 사용해보기
int main(void) {
	Student **hashTable; //배열만들기
	hashTable = (Student**)malloc(sizeof(Student) * TABLE_SIZE);
	init(hashTable);

	for (int i = 0; i < INPUT_SIZE; i++) {
		Student *student = (Student*)malloc(sizeof(Student));
		student->id = rand() % 1000000; //랜덤함수로 설정
		sprintf(student->name, "사람%d", student->id);
		if (search(hashTable, student->id) == -1) { //중복되는 ID는 존재 안하도록
			int index = findEmpty(hashTable, student->id);
			add(hashTable, student, index);
		}
	}

	show(hashTable);
	destructor(hashTable);
	system("pause");
	return 0;
}
